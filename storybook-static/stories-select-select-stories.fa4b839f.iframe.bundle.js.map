{"version":3,"file":"stories-select-select-stories.fa4b839f.iframe.bundle.js","mappings":";;;;AAmRA;;;;;AAMA;AAEA;AAEA;AAEA;AACA;;AAEA;AACA;AAEA;;;AAGA;;AAGA;;;;;;AAMA;;;AAGA;;;;;AAOA;;AAMA;AAIA;AAEA;;;AAIA;;AAEA;;;;;;;;;;AAUA;AAEA;;;;;;AAOA;AACA;AACA;AAEA;;;;AAIA;;;;AAIA;;;;AAIA;;;AAKA;;;ACjTA;AACA;;;;;AAKA;AACA;;AAEA;;;;;;;;AAuBA;;;;;;AAqBA;AAEA;;;;AAIA;AAEA","sources":["webpack://thetak-library/./src/components/select.tsx","webpack://thetak-library/./src/components/checkbox.tsx"],"sourcesContent":["\"use client\";\nimport { Controller } from \"react-hook-form\";\nimport React, { useRef, useState, useEffect } from \"react\";\nimport Image from \"next/image\";\nimport styled from \"@emotion/styled\";\nimport { Popper } from \"@mui/material\";\nimport Checkbox from \"./checkbox\";\nimport useClickOutside from \"@/hooks/use-click-outside\";\nimport { useTheme } from \"@emotion/react\";\n\nexport interface SelectOptionType {\n  label: string;\n  value: string | number | boolean;\n}\n\ntype Size = \"tiny\" | \"small\" | \"normal\" | \"big\" | \"responsive\";\ntype Status = \"normal\" | \"error\";\ninterface Props {\n  className?: string;\n  control: any;\n  name: string;\n  option: SelectOptionType[];\n  imgSize?: number;\n  selectStyle?: React.CSSProperties;\n  labelStyle?: React.CSSProperties;\n  popperStyle?: React.CSSProperties;\n  optionStyle?: React.CSSProperties;\n  disabled?: boolean;\n  size?: Size;\n  status?: Status;\n  multiSelect?: boolean;\n  allCheck?: boolean;\n  placeholder?: string;\n}\n\nfunction Select({\n  className,\n  control,\n  name,\n  option,\n  imgSize = 14,\n  selectStyle,\n  labelStyle,\n  optionStyle,\n  disabled = false,\n  size = \"normal\",\n  status = \"normal\",\n  multiSelect = false,\n  allCheck = false,\n  placeholder = \"선택\",\n}: Props) {\n  const theme = useTheme();\n  const ref = useRef<any>(null);\n  const [visible, setVisible] = useState(false);\n  useClickOutside({ ref1: ref }, () => setVisible(false));\n  const [selectedOptions, setSelectedOptions] = useState<SelectOptionType[]>(\n    []\n  );\n  const [filteredOptions, setFilteredOptions] = useState(option);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  useEffect(() => {\n    if (visible === false) {\n      setSearchTerm(\"\");\n      initOption();\n    }\n  }, [visible]);\n\n  const initOption = () => {\n    if (allCheck) {\n      const allOption: SelectOptionType = { label: \"전체\", value: \"all\" };\n      setFilteredOptions([allOption, ...option]);\n    } else {\n      setFilteredOptions(option);\n    }\n  };\n\n  useEffect(() => {\n    initOption();\n  }, []);\n\n  useEffect(() => {\n    setFocusedIndex(0);\n  }, [searchTerm]);\n\n  // 옵션 선택\n  const handleOptionClick = (el: SelectOptionType, onChange: any) => {\n    if (multiSelect) {\n      if (el.value === \"all\") {\n        if (selectedOptions.length === option.length) {\n          setSelectedOptions([]);\n          onChange([]);\n        } else {\n          setSelectedOptions(option);\n          onChange(option.map((opt) => opt.value));\n        }\n      } else {\n        const alreadySelected = selectedOptions.some(\n          (option) => option.value === el.value\n        );\n        const newSelectedOptions = alreadySelected\n          ? selectedOptions.filter((option) => option.value !== el.value)\n          : [...selectedOptions, el];\n        setSelectedOptions(newSelectedOptions);\n        onChange(newSelectedOptions.map((option) => option.value));\n      }\n    } else {\n      setSelectedOptions([el]);\n      onChange(el.value);\n      setVisible(false);\n    }\n  };\n\n  // 검색\n  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const searchValue = e.target.value.toLowerCase();\n    setSearchTerm(searchValue);\n    setFilteredOptions(\n      option.filter((opt) => opt.label.toLowerCase().includes(searchValue))\n    );\n  };\n\n  // 방향키로 아이템 선택\n  const handleKeyDown = (e: React.KeyboardEvent, onChange: any) => {\n    if (visible === false) {\n      setVisible(true);\n      return;\n    }\n    if (e.key === \"ArrowDown\") {\n      e.preventDefault();\n      setFocusedIndex((prev) => (prev + 1) % filteredOptions.length);\n    } else if (e.key === \"ArrowUp\") {\n      e.preventDefault();\n      setFocusedIndex(\n        (prev) => (prev - 1 + filteredOptions.length) % filteredOptions.length\n      );\n    } else if (e.key === \"Enter\") {\n      e.preventDefault();\n      if (Boolean(filteredOptions[focusedIndex]) === false) return;\n      handleOptionClick(filteredOptions[focusedIndex], onChange);\n    }\n  };\n\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  const idRef = useRef(\"simple-popper\");\n\n  // 셀렉트박스 클릭\n  const handleClick = React.useCallback(\n    (event: React.MouseEvent<HTMLElement>) => {\n      if (disabled) return;\n      idRef.current = \"simple-popper\";\n      setAnchorEl(event.currentTarget);\n      setVisible(!visible);\n      event.preventDefault();\n    },\n    [visible, disabled]\n  );\n\n  const scrollContainer = useRef(null);\n\n  // 방향키로 설정할 때 스크롤 위치 정하는 로직\n  useEffect(() => {\n    if (scrollContainer?.current) {\n      const value = selectType[size].height;\n      const numberOnly = parseInt(value, 10); // 결과: 44\n\n      scrollContainer.current.scrollTop = (focusedIndex - 4) * numberOnly;\n      return;\n    }\n  }, [focusedIndex, scrollContainer]);\n\n  return (\n    <Controller\n      name={name}\n      control={control}\n      render={({ field: { value, onChange } }) => {\n        const labels = selectedOptions.map((option) => option.label).join(\", \");\n        return (\n          <EContainer\n            className={className}\n            ref={ref}\n            visible={visible}\n            onClick={handleClick}\n            onKeyDown={(e) => handleKeyDown(e, onChange)}\n            tabIndex={0}\n            selectStyle={selectStyle}\n            disabled={disabled}\n            size={size}\n            status={status}\n            theme={theme}\n          >\n            <div className=\"label-wrapper\" style={labelStyle}>\n              <input\n                type=\"text\"\n                value={searchTerm}\n                disabled={disabled}\n                onChange={handleSearch}\n                placeholder={\n                  option.length === selectedOptions.length\n                    ? placeholder\n                    : labels || placeholder\n                }\n                style={{ border: \"none\", outline: \"none\", width: \"100%\" }}\n              />\n              <Image\n                src={`https://image.thetak.net/asset/product/images/${disabled ? \"arrow_down_gray_25\" : \"arrow_down_gray_2\"}.svg`}\n                alt=\"arrow\"\n                width={imgSize}\n                height={imgSize}\n              />\n            </div>\n\n            <StyledPopper\n              size={size}\n              placement=\"bottom\"\n              id={idRef.current}\n              open={visible}\n              anchorEl={anchorEl}\n              style={selectStyle}\n              theme={theme}\n              ref={scrollContainer}\n            >\n              {filteredOptions.map((el, index) => {\n                const isSelected = selectedOptions.some(\n                  (option) => option.value === el.value\n                );\n                return (\n                  <div\n                    className={`option ${isSelected ? \"selected\" : \"\"} ${index === focusedIndex ? \"focused\" : \"\"}`}\n                    key={index}\n                    onClick={(e) => {\n                      handleOptionClick(el, onChange);\n                      e.stopPropagation();\n                    }}\n                    style={{\n                      borderTop: index === 0 ? \"none\" : \"\",\n                      ...optionStyle,\n                    }}\n                  >\n                    {multiSelect && el.label !== \"전체\" ? (\n                      <Checkbox\n                        onChange={() => {}}\n                        style={{ gap: 12 }}\n                        shape=\"square\"\n                        checked={isSelected}\n                        label={el.label}\n                      />\n                    ) : (\n                      el.label\n                    )}\n                  </div>\n                );\n              })}\n            </StyledPopper>\n          </EContainer>\n        );\n      }}\n    />\n  );\n}\n\nexport default React.memo(Select);\n\nconst EContainer = styled.div<{\n  visible: boolean;\n  selectStyle?: React.CSSProperties;\n  disabled: boolean;\n  size: Size;\n  status?: \"normal\" | \"error\";\n  theme: any;\n}>`\n  display: inline-flex;\n  box-sizing: border-box;\n  position: relative;\n  min-width: ${({ selectStyle, size }) =>\n    selectStyle?.width || selectType[size].width};\n  .label-wrapper {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    width: ${({ selectStyle, size }) =>\n      selectStyle?.width || selectType[size].width};\n    height: ${({ selectStyle, size }) =>\n      selectStyle?.height || selectType[size].height};\n    padding: ${({ selectStyle, size }) =>\n      selectStyle?.padding || selectType[size].padding};\n    color: ${({ theme }) => theme.colors.grayScale.black};\n    background-color: ${({ theme }) => theme.colors.grayScale.white};\n    border-radius: 8px;\n    border: 1px solid ${({ theme }) => theme.colors.grayScale.gray3};\n    font-size: ${({ selectStyle, size }) =>\n      selectStyle?.fontSize || selectType[size].fontSize};\n    font-weight: ${({ selectStyle }) => selectStyle?.fontWeight || \"400\"};\n    line-height: normal;\n    cursor: pointer;\n    ${({ status, disabled, theme }) =>\n      STATUS_STYLE(theme)[disabled ? \"disabled\" : status]}\n    img {\n      transform: ${({ visible }) => `rotate(${visible ? 180 : 360}deg)`};\n      transition: 0.125s;\n    }\n\n    input {\n      &:disabled {\n        color: ${({ theme }) => theme.colors.grayScale.gray3};\n\n        &::placeholder {\n          color: ${({ theme }) => theme.colors.grayScale.gray25};\n        }\n      }\n    }\n  }\n`;\n\nconst StyledPopper = styled(Popper)<{\n  size: Size;\n  selectStyle?: React.CSSProperties;\n  theme: any;\n}>`\n  position: absolute;\n  top: ${({ selectStyle, size }) =>\n    selectStyle?.height\n      ? `calc(${selectStyle.height} + 2px)`\n      : selectType[size].height};\n  width: ${({ selectStyle, size }) =>\n    selectStyle?.width || selectType[size].width};\n  padding: ${({ selectStyle, size }) =>\n    selectStyle?.padding || selectType[size].padding};\n\n  padding-top: 0px;\n  background-color: ${({ theme }) => theme.colors.grayScale.white};\n  border-radius: 6px;\n  border: 1px solid ${({ theme }) => theme.colors.grayScale.gray4};\n  overflow-y: auto;\n  overflow-x: hidden;\n  z-index: 3;\n  cursor: pointer;\n  max-height: 300px;\n\n  .option {\n    display: flex;\n    align-items: center;\n    width: ${({ selectStyle, size }) =>\n      selectStyle?.width || selectType[size].width};\n    height: ${({ selectStyle, size }) =>\n      selectStyle?.height || selectType[size].height};\n    overflow: scroll;\n    padding-left: 14px;\n    padding-right: 14px;\n    margin-left: -14px;\n\n    color: ${({ theme }) => theme.colors.grayScale.black};\n    border-top: 1px solid ${({ theme }) => theme.colors.grayScale.gray4};\n    font-size: ${({ selectStyle, size }) =>\n      selectStyle?.fontSize || selectType[size].fontSize};\n    font-weight: ${({ selectStyle }) => selectStyle?.fontWeight || \"400\"};\n    line-height: normal;\n\n    &.selected {\n      background-color: ${({ theme }) => theme.colors.mainColor.main1};\n    }\n\n    &.focused {\n      background-color: ${({ theme }) => theme.colors.grayScale.gray3};\n    }\n\n    :hover {\n      background-color: ${({ theme }) => theme.colors.mainColor.main2};\n    }\n  }\n`;\n\nconst selectType = {\n  tiny: {\n    width: \"89px\",\n    height: \"28px\",\n    padding: \"0px 8px\",\n    fontSize: \"12px\",\n  },\n  small: {\n    width: \"89px\",\n    height: \"32px\",\n    padding: \"4px 8px\",\n    fontSize: \"12px\",\n  },\n  normal: {\n    width: \"290px\",\n    height: \"44px\",\n    padding: \"10px 14px\",\n    fontSize: \"16px\",\n  },\n  big: {\n    width: \"427px\",\n    height: \"44px\",\n    padding: \"10px 14px\",\n    fontSize: \"16px\",\n  },\n  responsive: {\n    width: \"100%\",\n    height: \"32px\",\n    padding: \"4px 8px\",\n    fontSize: \"12px\",\n  },\n};\n\nconst STATUS_STYLE = (theme: any) => ({\n  normal: {\n    backgroundColor: theme.colors.grayScale.white,\n    border: `1px solid ${theme.colors.grayScale.gray3}`,\n    color: theme.colors.grayScale.black,\n  },\n  error: {\n    backgroundColor: theme.colors.errorColor.error3,\n    border: `1px solid ${theme.colors.errorColor.errorMain}`,\n    color: theme.colors.grayScale.black,\n  },\n  disabled: {\n    backgroundColor: theme.colors.grayScale.gray4,\n    border: `1px solid ${theme.colors.grayScale.gray3}`,\n    color: theme.colors.grayScale.gray3,\n  },\n});\n","\"use client\";\nimport { forwardRef } from \"react\";\nimport styled from \"@emotion/styled\";\n\ninterface Props {\n  className?: string;\n  size?: string;\n  gap?: string;\n  style?: React.CSSProperties;\n  checked?: boolean;\n  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  label?: string;\n  customLabel?: React.ReactNode;\n  requiredPosition?: \"before\" | \"after\";\n  shape?: \"square\" | \"circle\";\n  disabled?: boolean;\n}\n\n// eslint-disable-next-line react/display-name\nexport const Checkbox = forwardRef((\n  {\n    className,\n    shape = \"square\",\n    size = \"20px\",\n    gap,\n    style,\n    checked = false,\n    onChange,\n    label,\n    customLabel,\n    requiredPosition,\n    disabled,\n  }: Props,\n  ref: any\n) => {\n  return (\n    <div style={{ height: size }}>\n      <CustomLabel\n        shape={shape}\n        disabled={disabled}\n        className={className}\n        ref={ref}\n        size={size}\n        gap={gap}\n        style={style}\n        requiredPosition={requiredPosition}\n        checked={checked}\n      >\n        <input type=\"checkbox\" checked={checked} onChange={onChange} />\n        <span className=\"label\">{label ? label : customLabel}</span>\n      </CustomLabel>\n    </div>\n  );\n});\n\nexport default Checkbox\n\nconst CustomLabel = styled.label<{\n  size: string;\n  gap?: string;\n  requiredPosition?: \"before\" | \"after\";\n  shape: \"square\" | \"circle\";\n  disabled: boolean;\n  checked: boolean;\n  checkbox?: any;\n}>`\n  display: inline-flex;\n  align-items: center;\n  gap: ${({ gap }) => (gap ? gap : \"6px\")};\n  color: ${({ theme }) => theme.colors.grayScale.black};\n  line-height: normal;\n  cursor: pointer;\n\n  input {\n    min-width: ${({ size }) => size};\n    height: ${({ size }) => size};\n    margin: 0px;\n    background-image: ${({ shape, disabled }) => {\n      if (shape === \"square\") {\n        if (disabled) {\n          return \"url(https://image.thetak.net/asset/product/images/checkbox_disabled.svg)\";\n        } else {\n          return \"url(https://image.thetak.net/asset/product/images/checkbox_default.svg)\";\n        }\n      }\n      if (shape === \"circle\") {\n        if (disabled) {\n          return \"url(https://image.thetak.net/asset/product/images/checkbox_radio_dsiabled_f.svg)\";\n        } else {\n          return \"url(https://image.thetak.net/asset/product/images/checkbox_radio_default.svg)\";\n        }\n      }\n    }};\n    background-repeat: no-repeat;\n    background-size: cover;\n    background-position: center;\n    appearance: none;\n    cursor: pointer;\n\n    &:checked {\n      background-image: ${({ shape, disabled, theme }) => {\n        if (shape === \"square\") {\n          if (disabled) {\n            return `url(https://image.thetak.net/asset/product/images/checkbox_disabled_t.svg)`;\n          } else {\n            return `url(${theme.checkbox.square.checked})`;\n          }\n        }\n        if (shape === \"circle\") {\n          if (disabled) {\n            return \"url(https://image.thetak.net/asset/product/images/checkbox_radio_disabled_t.svg)\";\n          } else {\n            return `url(${theme.checkbox.radio.checked})`;\n          }\n        }\n      }};\n    }\n  }\n\n  .label {\n    ::before {\n      content: ${({ requiredPosition }) =>\n        requiredPosition === \"before\" ? '\"*\"' : \"none\"};\n      color: ${({ theme }) => theme.colors.errorColor.errorMain};\n    }\n\n    ::after {\n      content: ${({ requiredPosition }) =>\n        requiredPosition === \"after\" ? '\"*\"' : \"none\"};\n      color: ${({ theme }) => theme.colors.errorColor.errorMain};\n    }\n  }\n`;\n"],"names":[],"sourceRoot":""}